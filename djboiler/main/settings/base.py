"""
Django settings for djboiler project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
import re
from pathlib import Path

import sentry_sdk
from decouple import config, Csv
from sentry_sdk.integrations.django import DjangoIntegration

# project root. Build internal paths like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# TODO fill in .env - SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config(
    'SECRET_KEY',
    default="django-insecure-6e*^7y^cxc+k#+y^!4bzc*1&d$&_i_i=)c_x%@^mlk4-^e9jir")

# TODO: Change your domain names here or in env file
DOMAIN = config('DOMAIN', default="localhost")
ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv(), default=f"{DOMAIN}, '127.0.0.1'")

ENVIRONMENT = config("ENV", default="local")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool, default=True)

DEFAULT_FROM_EMAIL = f"noreply@{DOMAIN}"

# Sometimes my CSRF protection would fail locally due to misdetection of HTTPS as HTTPS.
# If you don't need this, you can remove it, but it shouldn't hurt anything.
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sites",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    "django_extensions",

    "djangoql",

    "app_x",
    "users",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "djboiler.main.middleware.StatsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.sites.middleware.CurrentSiteMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "djboiler.main.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "djboiler.main.context_processors.settings",
            ]
        },
    }
]

TEMPLATE_STRING_IF_INVALID = "VARIABLE UNDEFINED: %s"

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

WSGI_APPLICATION = "djboiler.main.wsgi.application"

AUTH_USER_MODEL = "users.User"

DBURL = config("DATABASE_URL", default="")

# Custom deployment.
USER, PASSWORD, HOST, PORT, NAME = re.match(  # type: ignore
    r"^postgres://(?P<username>.*?)\:(?P<password>.*?)\@(?P<host>.*?)\:(?P<port>\d+)\/(?P<db>.*?)$",
    DBURL,
).groups()

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": NAME,
        "USER": USER,
        "PASSWORD": PASSWORD,
        "HOST": HOST,
        "PORT": int(PORT),
        # Keep connections in the pool for an hour.
        "CONN_MAX_AGE": 60 * 60,
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.getenv("REDIS_URL", ""),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        },
    }
}

SESSION_CACHE_ALIAS = "default"
SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
SESSION_COOKIE_AGE = 365 * 24 * 60 * 60
SESSION_COOKIE_SECURE = True


if config("EMAIL_URL", ""):
    EMAIL_BACKEND = "django.app_x.mail.backends.smtp.EmailBackend"
    EMAIL_HOST_USER, EMAIL_HOST_PASSWORD, EMAIL_HOST, EMAIL_PORT = re.match(  # type: ignore
        r"^email://(?P<username>.*)\:(?P<password>.*?)\@(?P<host>.*?)\:(?P<port>\d+)\/?$",
        config("EMAIL_URL", ""),
    ).groups()
else:
    EMAIL_BACKEND = "django.app_x.mail.backends.console.EmailBackend"


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

SITE_ID = 1

sentry_sdk.init(
    dsn=os.getenv("SENTRY_DSN"),
    traces_sample_rate=0.2,
    environment=ENVIRONMENT,
    integrations=[DjangoIntegration()],
)

TEST_RUNNER = "xmlrunner.extra.djangotestrunner.XMLTestRunner"

TEST_OUTPUT_FILE_NAME = "report.xml"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler"
        },
        'logfile': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'verbose',
            'filename': BASE_DIR / 'logs' / 'djboiler.log',
            'level': 'DEBUG',
            'when': 'D',
            'backupCount': 5
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": config("DJANGO_LOG_LEVEL", default="INFO"),
        },
        'djboiler': {
            'handlers': ['console', 'logfile'],
            'level': 'DEBUG',
            'propagate': True
        },
    },
    'formatters': {
        'verbose': {
            'format': '%(asctime)s - %(levelname)s - %(module)s -'
                      ' %(funcName)s %(message)s',
        },
    },
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_ROOT = config('STATIC_ROOT', default=Path(BASE_DIR).joinpath('_static'))
STATIC_URL = config('STATIC_URL', default='/static/')
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATICFILES_DIRS = [BASE_DIR / "static"]
